@model IEnumerable<dynamic>


@{
    ViewData["Title"] = "Fase Monitoring";
}


    <style>
    #tabelku {
        width: 100%;
        border-collapse: collapse;
    }

    #tabelku thead th {
        position: sticky;
        top: 0;
        background-color: #f8f9fa; /* Warna background header */
        z-index: 2; /* Supaya tetap di atas */
        text-align: left; /* Sesuai kebutuhan */
        border-bottom: 2px solid #dee2e6; /* Garis bawah header */
    }

    #tabelku tbody tr:nth-child(odd) {
        background-color: #f9f9f9; /* Alternatif warna baris */
    }

    #tabelku tbody tr:nth-child(even) {
        background-color: #ffffff;
    }

    .table-container {
        max-height: 400px; /* Tinggi maksimum tabel dengan scroll */
        overflow-y: auto;
        border: 1px solid #ddd; /* Tambahkan border pada container */
    }
</style>

 <style>
        .hidden-column {
            display: none;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px rgba(0,0,0,0.2);
            padding: 12px 16px;
            z-index: 1;
        }
        .dropdown:hover .dropdown-content {
            display: block;
        }
    </style>





<div class="d-flex gap-2 mb-1">
    <a asp-action="Create" class="btn btn-primary btn-sm m-1">Create New</a>
    <button id="toggleResponsive" class="btn btn-secondary btn-sm m-1">Freeze Column</button>
    <button id="exportToExcel" class="btn btn-success btn-sm m-1">
        <i class="fa fa-file-excel"></i> Export to Excel
    </button>
<div class="dropdown">
    <button class="btn btn-secondary btn-sm m-1">Show/Hide Columns</button>
    <div class="dropdown-content" style="z-index: 999;">
        <label><input type="checkbox" data-column="0" checked onchange="handleCheckboxChange(this, 0)"> Kode Project</label><br>
        <label><input type="checkbox" data-column="1" checked onchange="handleCheckboxChange(this, 1)"> Pekerjaan</label><br>
        <label><input type="checkbox" data-column="2" checked onchange="handleCheckboxChange(this, 2)"> Status LKP</label><br>
        <label><input type="checkbox" data-column="3" checked onchange="handleCheckboxChange(this, 3)"> Status Volume</label><br>
        <label><input type="checkbox" data-column="4" checked onchange="handleCheckboxChange(this, 4)"> Count Days Progress</label><br>
        <label><input type="checkbox" data-column="5" checked onchange="handleCheckboxChange(this, 5)"> Count Days Over</label><br>
        <label><input type="checkbox" data-column="6" onchange="handleCheckboxChange(this, 6)"> Status Durasi</label><br>
        <label><input type="checkbox" data-column="7" onchange="handleCheckboxChange(this, 7)"> Status Kontrak</label><br>
        <label><input type="checkbox" data-column="8" onchange="handleCheckboxChange(this, 8)"> Amandemen Nilai</label><br>
        <label><input type="checkbox" data-column="9" onchange="handleCheckboxChange(this, 9)"> Total Nilai Kontrak</label><br>
        <label><input type="checkbox" data-column="10" onchange="handleCheckboxChange(this, 10)"> Nilai Tagihan</label>
    </div>
</div>

</div>





        <script>
    document.getElementById('exportToExcel').addEventListener('click', function () {
        // Prepare your data (You can get the data from a table or other elements)
        let table = document.getElementById("tabelku"); // Replace with your table ID
        
        // Create a new workbook and worksheet from the table
        let wb = XLSX.utils.table_to_book(table, {sheet: "Sheet 1"});
        
        // Export the workbook as an Excel file
        XLSX.writeFile(wb, 'exported_data.xlsx');
    });
</script>


@{
    // Get the Disiplin claim from the user's claims
    var disiplinClaim = User.Claims.FirstOrDefault(c => c.Type == "Disiplin")?.Value;
}



<script>
    $(document).ready(function() {
        var table = $('#tabelku').DataTable({
            order: [],
            columnDefs: [
                { targets: [5, 6, 7, 8, 9, 10], visible: false }
            ]
        });

        // Function to toggle column visibility
        function toggleColumn(columnIndex, show) {
            var column = table.column(columnIndex);
            column.visible(show);
        }

        // Handle checkbox change to toggle column visibility
        function handleCheckboxChange(checkbox, columnIndex) {
            toggleColumn(columnIndex, checkbox.checked);
        }

        // Event listeners for checkboxes
        $('input[type="checkbox"]').on('change', function() {
            var columnIndex = $(this).data('column');
            handleCheckboxChange(this, columnIndex);
        });
    });
</script>




<div id="tableContainer" class="table-responsive">
    <table class="table table-bordered table-striped" id="tabelku">
        <thead>
            <tr>
                <th>Kode Project</th>
                <th>Pekerjaan</th>
                <th>Status LKP</th>
                <th>Status Volume</th>
                <th>Count Days Progress</th>
                <th>Count Days Over</th>
                <th>Status Durasi</th>
                <th>Status Kontrak</th>
                <th>Amandemen Nilai</th>
                <th>Total Nilai Kontrak</th>
                <th>Nilai Tagihan</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
 @foreach (var item in Model)
{
    // Filter the data based on Disiplin claim and Kode_Project
    if (string.IsNullOrEmpty(disiplinClaim) || disiplinClaim == "All" || item.Monitoring.Kode_Project.Split('/')[2].Equals(disiplinClaim, StringComparison.OrdinalIgnoreCase))
    {
                    <tr>
                        <td>@item.Monitoring.Kode_Project</td>
                       <td>@(item.Planning?.Pekerjaan ?? "N/A")</td>
                        <td>@item.Monitoring.Status_LKP</td>
                        <td>@item.Monitoring.Status_Volume</td>
                        <td>@item.Monitoring.Count_Days_Progress</td>
                        <td>@item.Monitoring.Count_Days_Over</td>
                        <td>@item.Monitoring.Status_Durasi</td>
                        <td>@item.Monitoring.Status_Kontrak</td>
                        <td>@item.Monitoring.Amandemen_Nilai</td>
                        <td>@item.Monitoring.Total_Nilai_Kontrak.ToString("N0")</td>
                        <td>@item.Monitoring.Nilai_Tagihan.ToString("N0")</td>
                        <td>
    
                          <form asp-action="Detail" method="post">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.Monitoring.Id" />
                                <button type="submit" class="btn btn-primary btn-sm">Detail</button>
                            </form>  
    
    
                            <form asp-action="FormEdit" method="post" style="display:inline;" class="edit-form">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.Monitoring.Id" />
                                <button type="submit" class="btn btn-warning btn-sm">Edit</button>
                            </form>

                            <form asp-action="Delete" asp-route-id="@item.Monitoring.Id" method="post" style="display:inline;" class="delete-form">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


<!-- Pagination -->

</div>

@section Scripts {
    <!-- Tambahkan library DataTables -->




        <script>
    document.getElementById('toggleResponsive').addEventListener('click', function () {
        const tableContainer = document.getElementById('tableContainer');
        tableContainer.classList.toggle('table-responsive');

        // Update text tombol berdasarkan status
        if (tableContainer.classList.contains('table-responsive')) {
            this.textContent = 'Disable Freeze Column';
        } else {
            this.textContent = 'Enable Freeze Column';
        }
    });
</script>






 <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Periksa pesan sukses dari TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Success!',
                    icon: 'success',
                    timer: 3000, // Durasi dalam milidetik (3 detik)
                    showConfirmButton: false // Tidak menampilkan tombol OK
                });
                </text>
            }
        });
    </script>


      <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Tangkap semua form dengan class 'delete-form'
            const deleteForms = document.querySelectorAll('.delete-form');
            
            deleteForms.forEach(form => {
                form.addEventListener('submit', function (event) {
                    // Hentikan pengiriman formulir langsung
                    event.preventDefault();

                    // Tampilkan SweetAlert untuk konfirmasi
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You won\'t be able to revert this!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Kirim formulir secara manual jika dikonfirmasi
                            form.submit();
                        }
                    });
                });
            });
        });
    </script>

}