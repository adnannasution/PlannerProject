@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Fase Execution List";
}

<style>
    #tabelku {
        width: 100%;
        border-collapse: collapse;
    }

    #tabelku thead th {
        position: sticky;
        top: 0;
        background-color: #f8f9fa;
        z-index: 2;
        text-align: left;
        border-bottom: 2px solid #dee2e6;
    }

    #tabelku tbody tr:nth-child(odd) {
        background-color: #f9f9f9;
    }

    #tabelku tbody tr:nth-child(even) {
        background-color: #ffffff;
    }

    .table-container {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
    }
</style>


 <style>
        .hidden-column {
            display: none;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px rgba(0,0,0,0.2);
            padding: 12px 16px;
            z-index: 1;
        }
        .dropdown:hover .dropdown-content {
            display: block;
        }
    </style>
    

<div class="d-flex gap-2 mb-1">
    <a asp-action="Create" class="btn btn-primary btn-sm m-1">Create New</a>
    <button id="toggleResponsive" class="btn btn-secondary btn-sm m-1">Freeze Column</button>
    <button id="exportToExcel" class="btn btn-success btn-sm m-1">
        <i class="fa fa-file-excel"></i> Export to Excel
    </button>


<div class="dropdown">
    <button class="btn btn-secondary btn-sm m-1">Show/Hide Columns</button>
    <div class="dropdown-content" style="z-index: 999;">
        <label><input type="checkbox" data-column="0" checked onchange="handleCheckboxChange(this, 0)"> Kode Project</label><br>
        <label><input type="checkbox" data-column="1" checked onchange="handleCheckboxChange(this, 1)"> Pekerjaan</label><br>
        <label><input type="checkbox" data-column="2" checked onchange="handleCheckboxChange(this, 2)"> Start Date</label><br>
        <label><input type="checkbox" data-column="3" checked onchange="handleCheckboxChange(this, 3)"> End Date MPL</label><br>
        <label><input type="checkbox" data-column="4" checked onchange="handleCheckboxChange(this, 4)"> Amandemen Waktu</label><br>
        <label><input type="checkbox" data-column="5" onchange="handleCheckboxChange(this, 5)"> End Date</label><br>
        <label><input type="checkbox" data-column="6" onchange="handleCheckboxChange(this, 6)"> Durasi Kontrak</label><br>
        <label><input type="checkbox" data-column="7" onchange="handleCheckboxChange(this, 7)"> Durasi Aktual HK</label><br>
        <label><input type="checkbox" data-column="8" onchange="handleCheckboxChange(this, 8)"> Date LKP</label><br>
        <label><input type="checkbox" data-column="9" onchange="handleCheckboxChange(this, 9)"> Plan Progress Fisik</label><br>
        <label><input type="checkbox" data-column="10" onchange="handleCheckboxChange(this, 10)"> Progress Fisik 0</label><br>
        <label><input type="checkbox" data-column="11" onchange="handleCheckboxChange(this, 11)"> Progress Fisik</label><br>
        <label><input type="checkbox" data-column="12" onchange="handleCheckboxChange(this, 12)"> Status Performance</label><br>
        <label><input type="checkbox" data-column="13" onchange="handleCheckboxChange(this, 13)"> Progress Finansial</label><br>
        <label><input type="checkbox" data-column="14" onchange="handleCheckboxChange(this, 14)"> LKP Time Limit</label><br>
       
    </div>
</div>

</div>




        <script>
    document.getElementById('exportToExcel').addEventListener('click', function () {
        // Prepare your data (You can get the data from a table or other elements)
        let table = document.getElementById("tabelku"); // Replace with your table ID
        
        // Create a new workbook and worksheet from the table
        let wb = XLSX.utils.table_to_book(table, {sheet: "Sheet 1"});
        
        // Export the workbook as an Excel file
        XLSX.writeFile(wb, 'exported_data.xlsx');
    });
</script>



@{
    // Get the Disiplin claim from the user's claims
    var disiplinClaim = User.Claims.FirstOrDefault(c => c.Type == "Disiplin")?.Value;
}







<div id="tableContainer" class="table-responsive">

    <table class="table table-bordered table-striped" id="tabelku">
        <thead>
            <tr>
                <th>Kode Project</th>
                <th>Pekerjaan</th>
                <th>Start Date</th>
                <th>End Date MPL</th>
                <th>Amandemen Waktu</th>
                <th>End Date</th>
                <th>Durasi Kontrak</th>
                <th>Durasi Aktual HK</th>
                <th>Date LKP</th>
                <th>Plan Progress Fisik</th>
                <th>Progress Fisik 0</th>
                <th>Progress Fisik</th>
                <th>Status Performance</th>
                <th>Progress Finansial</th>
                <th>LKP Time Limit</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
@foreach (var item in Model)
{
    // Filter the data based on Disiplin claim and Kode_Project
    if (string.IsNullOrEmpty(disiplinClaim) || disiplinClaim == "All" || item.Kode_Project.Split('/')[2].Equals(disiplinClaim, StringComparison.OrdinalIgnoreCase))
    {
                    <tr>
                        <td>@item.Kode_Project</td>
                        <td>@item.Pekerjaan</td>
                        <td>@item.Start_Date.ToString("yyyy-MM-dd")</td>
                        <td>@item.End_Date_MPL.ToString("yyyy-MM-dd")</td>
                        <td>@item.Amandemen_Waktu</td>
                        <td>@item.End_Date.ToString("yyyy-MM-dd")</td>
                        <td>@item.Durasi_Kontrak</td>
                        <td>@item.Durasi_Aktual_HK</td>
                        <td>@item.Date_LKP</td>
                        <td>@item.Plan_Progress_Fisik</td>
                        <td>@item.Progress_Fisik_0</td>
                        <td>@item.Progress_Fisik</td>
                        <td>@item.Status_Performance</td>
                        <td>@item.Progress_Finansial</td>
                        <td>@item.LKP_Time_Limit</td>
                        <td>
                            <a asp-action="Detail" asp-route-kodeproject="@item.Kode_Project" class="btn btn-info btn-sm">Detail</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>




@section Scripts {


    <script>
    $(document).ready(function() {
        var table = $('#tabelku').DataTable({
            paging: true, // Aktifkan Pagination
            searching: true, // Aktifkan Filter/Searching
            ordering: true, 
            order: [],// Aktifkan Sorting
            columnDefs: [
            
                { targets: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], visible: false } // Kolom-kolom yang tersembunyi
            ]
        });

        // Function to toggle column visibility
        function toggleColumn(columnIndex, show) {
            var column = table.column(columnIndex);
            column.visible(show);
        }

        // Handle checkbox change to toggle column visibility
        function handleCheckboxChange(checkbox, columnIndex) {
            toggleColumn(columnIndex, checkbox.checked);
        }

        // Event listeners for checkboxes
        $('input[type="checkbox"]').on('change', function() {
            var columnIndex = $(this).data('column');
            handleCheckboxChange(this, columnIndex);
        });
    });
</script>


    <script>

        document.getElementById('toggleResponsive').addEventListener('click', function () {
            const tableContainer = document.getElementById('tableContainer');
            tableContainer.classList.toggle('table-responsive');

            if (tableContainer.classList.contains('table-responsive')) {
                this.textContent = 'Disable Freeze Column';
            } else {
                this.textContent = 'Enable Freeze Column';
            }
        });
    </script>







     <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Periksa pesan sukses dari TempData
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Success!',
                    icon: 'success',
                    timer: 3000, // Durasi dalam milidetik (3 detik)
                    showConfirmButton: false // Tidak menampilkan tombol OK
                });
                </text>
            }
        });
    </script>


      <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Tangkap semua form dengan class 'delete-form'
            const deleteForms = document.querySelectorAll('.delete-form');
            
            deleteForms.forEach(form => {
                form.addEventListener('submit', function (event) {
                    // Hentikan pengiriman formulir langsung
                    event.preventDefault();

                    // Tampilkan SweetAlert untuk konfirmasi
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You won\'t be able to revert this!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Kirim formulir secara manual jika dikonfirmasi
                            form.submit();
                        }
                    });
                });
            });
        });
    </script>
}
